package com.hromov.cruise.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hromov.cruise.model.Cruise;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.client.AutoConfigureMockRestServiceServer;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.web.client.MockRestServiceServer;
import org.springframework.test.web.servlet.MockMvc;

import static org.springframework.test.web.client.ExpectedCount.once;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;
import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@AutoConfigureMockRestServiceServer
@EmbeddedKafka
class CruiseControllerTest {
    @Value("${server.port}")
    private int port;
    @Autowired
    private MockMvc mvc;
    @Autowired
    private MockRestServiceServer mockRest;
    @Autowired
    private ObjectMapper mapper;

    @Test
    void testLoadsFindCruisePage() throws Exception {
        mvc.perform(get("/cruises"))
                .andExpect(status().isOk())
                .andExpect(model().attributeExists("cruiseList"));
    }

    @Test
    void testGetsACruiseWithAutogeneratedRestData() throws Exception {
        mockRest.expect(once(), requestTo("http://localhost:" + port + "/rest-data/CrUiSeS/1"))
                .andExpect(method(HttpMethod.GET))
                .andRespond(withSuccess("{}", MediaType.APPLICATION_JSON));

        mvc.perform(get("/cruises/1"))
                .andExpect(status().isOk())
                .andExpect(content().json("{}"));

        mockRest.verify();
    }

    @Test
    @WithMockUser(authorities = "ADMIN")
    void testLoadsAddCruisePage() throws Exception {
        mvc.perform(get("/cruises/add_cruise"))
                .andExpect(status().isOk())
                .andExpect(model().attributeExists("shipList"))
                .andExpect(model().attributeExists("stationList"));
    }

    @Test
    @WithMockUser(authorities = "ADMIN")
    void testAddsACruise() throws Exception {
        Cruise cruise = Cruise.builder()
                .id(1L)
                .description("test")
                .build();

        mvc.perform(post("/cruises/add_cruise")
                        .content(mapper.writeValueAsString(cruise))
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isCreated());
    }

    @Test
    @WithMockUser(authorities = "ADMIN")
    void testValidatesCruiseBeforeSaving() throws Exception {
        Cruise cruise = new Cruise(); //not valid

        mvc.perform(post("/cruises/add_cruise")
                        .content(mapper.writeValueAsString(cruise))
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().is4xxClientError());
    }

    @Test
    void addingCruisesRequiresAuthentication() throws Exception {
        mvc.perform(post("/cruises/add_cruise"))
                .andExpect(status().isUnauthorized());
        mvc.perform(get("/cruises/add_cruise"))
                .andExpect(status().isUnauthorized());
    }

    @Test
    @WithMockUser(authorities = "ADMIN")
    @SqlGroup({
            @Sql(value = "classpath:reset_data.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD),
            @Sql(value = "classpath:test_data.sql")
    })
    void testLoadsEditCruisePage() throws Exception {
        Cruise cruise = Cruise.builder()
                .id(1L)
                .description("test")
                .build();
        mvc.perform(post("/cruises/add_cruise")
                        .content(mapper.writeValueAsString(cruise))
                        .contentType(MediaType.APPLICATION_JSON))
                .andDo(print());

        mvc.perform(get("/cruises/edit_cruise/350"))
                .andExpect(status().isOk())
                .andExpect(model().attributeExists("cruise"))
                .andExpect(model().attributeExists("shipList"))
                .andExpect(model().attributeExists("stationList"));
    }

    @Test
    @WithMockUser(authorities = "ADMIN")
    @SqlGroup({
            @Sql(value = "classpath:reset_data.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD),
            @Sql(value = "classpath:test_data.sql")
    })
    void testEditsCruise() throws Exception {
        Cruise cruise = Cruise.builder()
                .id(350L)
                .description("test")
                .build();

        mvc.perform(put("/cruises/edit_cruise")
                        .content(mapper.writeValueAsString(cruise))
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk());
        mvc.perform((get("/cruises/noRest/" + cruise.getId())))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.description").isNotEmpty());
    }

    @Test
    @WithMockUser(authorities = "ADMIN")
    @SqlGroup({
            @Sql(value = "classpath:reset_data.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD),
            @Sql(value = "classpath:test_data.sql")
    })
    void testDeletesCruise() throws Exception {
        mvc.perform(delete("/cruises/delete_cruise")
                        .param("cruiseId", "350"))
                .andExpect(status().isOk());
        mvc.perform(get("/cruises/noRest/350"))
                .andExpect(status().isNotFound());
    }
}