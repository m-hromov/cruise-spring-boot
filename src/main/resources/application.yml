rsa:
  public-key: certificates/public.pem
  private-key: certificates/private.pem

server:
  port: 8081

spring:
  application:
    name: cruise-spring
  datasource:
    url: ${JDBC_C:jdbc:postgresql://localhost:5432/cruise_spring}
    type: org.springframework.jdbc.datasource.SimpleDriverDataSource
    driver-class-name: org.postgresql.Driver
    username: MarkedOne
    password: GuysIcaughtAnOlive
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  data:
    rest:
      base-path: /rest-data
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 863747538644-2odmuhp7ln8bg6evdvndl2hs4l18c5ir.apps.googleusercontent.com
            clientSecret: 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
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
  kafka:
    bootstrap-servers:
      - host.docker.internal:9092
    consumer:
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.hromov.cruise.model"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
logging:
  level:
    root: info